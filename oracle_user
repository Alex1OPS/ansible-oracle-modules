#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
---
module: oracle_user
short_description: Manage users/schemas in an Oracle database
description:
    - Manage users/schemas in an Oracle database
    - Can be run locally on the controlmachine or pushed to a remote host
version_added: "1.9.1"
options:
    hostname:
        description:
            - The Oracle database host
        required: false
        default: localhost
    port:
        description:
            - The listener port number on the host
        required: false
        default: 1521
    service_name:
        description:
            - The database service name to connect to
        required: true
    user:
        description:
            - The Oracle user name to connect to the database
        required: true
    password:
        description:
            - The Oracle user password for 'user'
        required: true
    schema:
        description:
            - The schema that 
        required: false
        default: null
    schema_password:
        description:
            - The password for the new schema. i.e '..identified by password'
        required: false
        default: null
    schema_password_hash:
        description:
            - The password hash for the new schema. i.e '..identified by values 'XXXXXXX'
        required: false
        default: null
    default_tablespace:
        description:
            - The default tablespace for the new schema. The tablespace must exist
        required: false
        default: null
    grants:
        description:
            - The privileges granted to the new schema
        required: false
        default: null
notes:
    - cx_Oracle needs to be installed
requirements: [ "cx_Oracle" ]
author: Mikael SandstrÃ¶m
'''

EXAMPLES = '''
# Create a new schema on a remote db by running the module on the controlmachine  (i.e: delegate_to: localhost)
oracle_user: hostname=remote-db-server service_name=orcl user=system password=manager schema=myschema schema_password=mypass default_tablespace=test state=present grants="'create session', create any table'" 

# Create a new schema on a remote db
oracle_user: hostname=localhost service_name=orcl user=system password=manager schema=myschema schema_password=mypass default_tablespace=test state=present grants=dba

# Drop a schema on a remote db
oracle_user: hostname=localhost service_name=orcl user=system password=manager schema=myschema state=absent


'''



try:
	import cx_Oracle
except ImportError:
	cx_oracle_exists = False
else:
	cx_oracle_exists = True


# Check if the user/schema exists
def check_user_exists (msg, cursor, schema):
	#sql = 'select count(*) from dba_users where username = upper(\''+schema+'\')'
	sql = 'select count(*) from dba_users where username = upper(\'%s\')' % schema
	
	try:
			cursor.execute(sql)
			result = cursor.fetchall()[0][0]
	except cx_Oracle.DatabaseError, exc:
			error, = exc.args
			msg[0] = error.message+ 'sql: ' + sql
			return False
			
	if result > 0:
		#msg[0] = 'The schema '+schema+' already exists'
		msg[0] = 'The schema %s already exists' % schema
		return True

# Create the user/schema
def create_user (msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, grants):
	if not (schema):
		msg[0] = 'Error: Missing schema name'
		return False

	if not (schema_password):
		if not (schema_password_hash):
			msg[0] = 'Error: Missing schema password or password hash'
			return False
	
	
	if (schema_password_hash):
		sql = 'create user %s identified by values \'%s\' ' % (schema,schema_password_hash)

	else:
		sql = 'create user %s identified by %s '% (schema,schema_password)
	
	if (default_tablespace):
		sql += 'default tablespace %s '% default_tablespace
		sql += 'quota unlimited on %s '% default_tablespace
		

	
	try:
		cursor.execute(sql)
	except cx_Oracle.DatabaseError, exc:
		error, = exc.args
		msg[0] = 'Blergh, something went wrong while creating the schema - %s sql: %s' % (error.message, sql)
		return False

	# Add grants to user if explicitly set. If not, only 'create session' is granted
	if (grants):
		grants=grants.replace("'","").replace(", ",",").lstrip(" ").rstrip(",")
		sql = 'grant %s to %s '% (grants, schema)
	else:
		sql = 'grant create session to %s '% schema


	try:
		cursor.execute(sql)
	except cx_Oracle.DatabaseError, exc:
		error, = exc.args
		msg[0] = 'Blergh, something went wrong while adding grants to the schema - %s sql: %s' % (error.message, sql)
		return False

	return True
	
# Drop the user
def drop_user (msg, cursor, schema):
	#black_list = ['sys','system']

	#	msg[0] = 'Trying to drop an internal user. Not allowed'
	#	return False

	#sql = 'drop user '+schema+' cascade'
	sql = 'drop user %s cascade' % schema

	try:
		cursor.execute(sql)
	except cx_Oracle.DatabaseError, exc:
		error, = exc.args
		msg[0] = 'Blergh, something went wrong while dropping the schema - %s sql: %s' % (error.message, sql)
		return False

	return True


def main():

	msg = ['']
	module = AnsibleModule(
		argument_spec = dict(
			hostname      = dict(default='localhost'),
			port          = dict(default=1521),
			service_name  = dict(required=True),
			user          = dict(required=True),
			password      = dict(required=True),
			schema        = dict(default=None),
			schema_password  = dict(default=None),
			schema_password_hash  = dict(default=None),
			state         = dict(sdefault="present", choices=["present", "absent"]),
			default_tablespace = dict(default=None),
			grants         = dict(default=None)
		),
		mutually_exclusive=[['schema_password', 'schema_password_hash']]
	)

	hostname = module.params["hostname"]
	port = module.params["port"]
	service_name = module.params["service_name"]
	user = module.params["user"]
	password = module.params["password"]
	schema = module.params["schema"]
	schema_password = module.params["schema_password"]
	schema_password_hash = module.params["schema_password_hash"]
	state = module.params["state"]
	default_tablespace = module.params["default_tablespace"]
	grants = module.params["grants"]

	if not cx_oracle_exists:
		module.fail_json(msg="The cx_Oracle module is required. 'pip install cx_Oracle' should do the trick. If cx_Oracle is installed, make sure ORACLE_HOME & LD_LIBRARY_PATH is set")


	dsn = cx_Oracle.makedsn(host=hostname,port=port,service_name=service_name)
	try:
		conn = cx_Oracle.connect(user,password,dsn)
	except cx_Oracle.DatabaseError, exc:
		error, = exc.args
		msg[0] = 'Could not connect to database - %s' % error.message
		module.fail_json(msg=msg[0], changed=False)

	cursor = conn.cursor()

	if state == 'present':
		if not check_user_exists(msg, cursor, schema):
			if create_user(msg, cursor, schema, schema_password, schema_password_hash, default_tablespace, grants):
				msg[0] = 'The schema %s has been created successfully' % schema
				module.exit_json(msg=msg[0], changed=True)
			else:
				module.fail_json(msg=msg[0], changed=False)

	elif state == 'absent':
		if check_user_exists(msg, cursor, schema):
			if drop_user(msg, cursor, schema):
				msg[0] = 'The schema %s has been dropped successfully' % schema
				module.exit_json(msg=msg[0], changed=True)
		else:
			module.exit_json(msg='The schema %s doesn\'t exist' % schema, changed=False)				
	
	module.exit_json(msg=msg[0], changed=False)






from ansible.module_utils.basic import *
if __name__ == '__main__':
	main()
