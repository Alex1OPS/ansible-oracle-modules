#!/usr/bin/python
# -*- coding: utf-8 -*-

DOCUMENTATION = '''
notes:
    - cx_Oracle needs to be installed
requirements: [ "cx_Oracle" ]
author: Ilmar Kerm, ilmar.kerm@gmail.com, @ilmarkerm
'''

EXAMPLES = '''
aaa
'''

try:
    import cx_Oracle
except ImportError:
    cx_oracle_exists = False
else:
    cx_oracle_exists = True

try:
    import ldap
except ImportError:
    ldap_module_exists = False
else:
    ldap_module_exists = True

# Module code

def query_ldap_users():
    resultattrlist = [lparam['username'], 'pwdLastSet', 'memberOf']
    users = []
    try:
        result = lconn.search_s(lparam['basedn'], ldap.SCOPE_SUBTREE if lparam['subtree'] else ldap.SCOPE_ONELEVEL, lparam['filter'], resultattrlist)
        results = [entry for dn, entry in result if isinstance(entry, dict)]
        for user in results:
            users.append( {'username': user[lparam['username']][0], 'pwdReset': user['pwdLastSet'][0], 'memberOf': user['memberOf'] } )
    except ldap.LDAPError, e:
        module.fail_json(msg="Error querying LDAP: %s" % e, changed=False)
    return users

# Ansible code
def main():
    global lconn, conn, lparam, module
    msg = ['']
    module = AnsibleModule(
        argument_spec = dict(
            hostname      = dict(default='localhost'),
            port          = dict(default=1521),
            service_name  = dict(required=True),
            user          = dict(required=True),
            password      = dict(required=True),
            mode          = dict(default='normal', choices=["normal","sysdba"]),
            user_default_tablespace = dict(default='USERS'),
            user_temp_tablespace = dict(default='temp'),
            user_profile = dict(default='default'),
            user_default_password = dict(default=None), # None means EXTERNAL
            user_grants        = dict(default=None, type='list'),
            ldap_host     = dict(required=True),
            ldap_port     = dict(default=389, type='int'),
            ldap_is_ldaps = dict(default=False, type='bool'),
            ldap_binddn   = dict(required=True),
            ldap_bindpassword = dict(required=True),
            ldap_user_basedn = dict(required=True),
            ldap_user_subtree = dict(default=True, type='bool'),
            ldap_user_filter = dict(default='(objectClass=user)'),
            ldap_username_attribute = dict(default='sAMAccountName'),
            deleted_user_mode = dict(default='lock', choices=['lock','drop']),
            password_changed_mode = dict(default='do-nothing', choices=['expire','do-nothing'])
        ),
        supports_check_mode=True
        #, mutually_exclusive=[['schema_password', 'schema_password_hash']]
    )
    # Check for required modules
    if not cx_oracle_exists:
        module.fail_json(msg="The cx_Oracle module is required. 'pip install cx_Oracle' should do the trick. If cx_Oracle is installed, make sure ORACLE_HOME & LD_LIBRARY_PATH is set")
    if not ldap_module_exists:
        module.fail_json(msg="The ldap module is required. 'pip install ldap' should do the trick.")
    # Connect to LDAP
    try:
        ldapurl = "%s://%s:%s" % ('ldaps' if module.params['ldap_is_ldaps'] else 'ldap', module.params['ldap_host'], module.params['ldap_port'])
        lconn = ldap.initialize(ldapurl)
        lconn.set_option(ldap.OPT_REFERRALS, 0)
        lconn.simple_bind_s(module.params['ldap_binddn'], module.params['ldap_bindpassword'])
    except ldap.LDAPError, e:
        module.fail_json(msg="LDAP connection error: %s" % e)
    lparam = {
        'basedn': module.params['ldap_user_basedn'],
        'subtree': module.params['ldap_user_subtree'],
        'filter': module.params['ldap_user_filter'],
        'username': module.params['ldap_username_attribute']
    }
    # Connect to database
    dsn = cx_Oracle.makedsn(host=module.params['hostname'], port=module.params['port'], service_name=module.params['service_name'])
    try:
        if module.params['mode'] == 'sysdba':
            conn = cx_Oracle.connect(module.params['user'], module.params['password'], dsn, mode=cx_Oracle.SYSDBA)
        else:
            conn = cx_Oracle.connect(module.params['user'], module.params['password'], dsn)
    except cx_Oracle.DatabaseError, exc:
        error, = exc.args
        msg[0] = 'Could not connect to database - %s ' % (error.message)
        module.fail_json(msg=msg[0], changed=False)
    #
    if module.check_mode:
        module.exit_json(changed=False)
    #
    users = query_ldap_users()
    lconn.unbind()
    #
    usernames = []
    for user in users:
        usernames.append(user['username'])
    msg[0] = usernames
    c = conn.cursor()
    var_usernames = c.arrayvar(cx_Oracle.STRING, usernames)
    var_changes = c.var(cx_Oracle.NUMBER)
    c.execute("""
        DECLARE
          TYPE str_array IS TABLE OF VARCHAR2(50) INDEX BY BINARY_INTEGER;
          v_changes NUMBER:= 0;
          v_profile dba_users.profile%type;
          v_tbs dba_users.default_tablespace%type;
          v_tmp dba_users.temporary_tablespace%type;

          PROCEDURE execsql(v_sql VARCHAR2) IS
          BEGIN
            EXECUTE IMMEDIATE v_sql;
          END;

          PROCEDURE add_user(p_username dba_users.username%type) IS
            v_sql VARCHAR2(100);
          BEGIN
            v_sql:= 'CREATE USER '||p_username||' IDENTIFIED EXTERNALLY DEFAULT TABLESPACE '||v_tbs;
            execsql(v_sql);
            INSERT INTO testldap.t1 (username) VALUES (v_sql);
            v_changes:= v_changes + 1;
          END;

          PROCEDURE remove_user(p_username dba_users.username%type) IS
          BEGIN
            v_changes:= v_changes + 1;
          END;

          PROCEDURE alter_user(p_username dba_users.username%type) IS
          BEGIN
            v_changes:= v_changes + 1;
          END;

          FUNCTION clean_string(p_str VARCHAR2) RETURN VARCHAR2 IS
          BEGIN
            RETURN replace(UPPER(p_str), '-', '');
          END;

          PROCEDURE process_user(p_username dba_users.username%type) IS
            v_clean_username dba_users.username%type;
            v_as dba_users.account_status%type;
            v_at dba_users.authentication_type%type;
            v_dt dba_users.default_tablespace%type;
            v_temp dba_users.temporary_tablespace%type;
            v_p dba_users.profile%type;
          BEGIN
            v_clean_username:= clean_string(p_username);
            SELECT account_status, authentication_type, default_tablespace, temporary_tablespace, profile
                INTO v_as, v_at, v_dt, v_temp, v_p
            FROM dba_users WHERE username = v_clean_username;
          EXCEPTION
            WHEN no_data_found THEN
              add_user(v_clean_username);
          END;

          PROCEDURE process_array(p_usernames IN str_array) IS
          BEGIN
            FOR i IN p_usernames.FIRST..p_usernames.LAST LOOP
                process_user(p_usernames(i));
            END LOOP;
          END;

        BEGIN
          -- Validate parameters
          v_tbs:= :var_tbs;
          -- Process userlist
          process_array(:var_usernames);
          -- Check users who are not listed
          -- Return
          :var_changes:= v_changes;
        END;
    """, {'var_usernames': var_usernames, 'var_changes': var_changes, 'var_tbs': module.params['user_default_tablespace']})
    conn.commit()
    #
    module.exit_json(msg=msg[0], changed=var_changes.getvalue()>0)


from ansible.module_utils.basic import *
if __name__ == '__main__':
    main()
